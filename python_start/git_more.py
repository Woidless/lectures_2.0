
# GIT. Контроль версий

# !!! Все неизвестные команды нужно гуглить

# 0. Создайте репозиторий на GitHub с названием MyRepo

# 1. Откройте терминал
'''
ctrk+alt+t
'''
# 2. Откройте документацию гит в терминале специальной командой.
#  Покопайтесь в ней :)
'''
git --help
'''
# 3. Создайте папку test на рабочем столе,
# После создайте в вашей папке test файл main.py и напишите в нем функцию которая выдает в консоль 'Hello World!'
# Затем перейдите в папку через терминал
# Для того чтобы добавить файл в репозиторий на гитхаб, инициализируйте локальный репозиторий.
'''
git init
mkdir test
cd test
touch main.py
code main.py
print('Hello World)
'''
# 4. Затем скажите Git добавить копии содержимого всех файлов в текущей папке в локальный репозиторий
'''
git add .
'''
# 5. Эти копии теперь хранятся во временной промежуточной области, которую Git называет «индексом». Для того чтобы содержимое индекса в репозитории перевести из промежуточной области в постоянное хранилище создайте commit
'''
git commit -m 'done'
'''
# 6. Выведите статус работы с гитом в терминал
'''
git status
'''
# 7. C помощью специальной команды посмотрите историю изменений (логов)
'''
got log
'''
# 8. Создайте новую ветку mybranch через терминал.
'''
git branch mybranch
'''
# 9. Переключитесь на новую ветку mybranch. Проверьте статус
'''
git checkout mybranch
'''
# 10. Измените код в вашем файле main.py
# Теперь ваша функция должна выводить "Python is awesome!"
'''
nano main.py
def func(): print('Python is awesome!')
'''
# 11. Создайте новый коммит с комментарием "исправил функцию, добавил новое сообщение".
'''
git commit -m 'Исправил функцию, добавил новое сообщение'
'''
# 12. Переключитесь назад на ветку master и проверьте есть ли изменения которые вы совершили на ветке mybranch
'''
git checkout master
git status
'''
# 13. На данный момент две ветки отличаются. Соедините их командой merge
'''
git merge mybranch
'''
# 14. Запуште ваш файл к себе на репозиторий MyRepo
'''
git push origin master
'''